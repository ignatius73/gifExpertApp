{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","a","category","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","gif","images","downsized_large","title","GifGridItem","props","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","imagen","GifExpertApp","categories","setcategories","cat","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAM1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,sBAAMC,SAde,SAACC,GACtBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MASlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAtBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCZlBG,EAAO,uCAAG,uCAAAC,EAAA,6DAASC,EAAT,EAASA,SACtBC,EADa,iDACoCC,UAAUF,GAD9C,+DAEAG,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE3B,MAAO,CACFC,GAAID,EAAIC,GACRC,IAAG,UAAEF,EAAIG,cAAN,aAAE,EAAYC,gBAAgBZ,IACjCa,MAAOL,EAAIK,UAVA,kBAcfP,GAde,4CAAH,sDCEPQ,EAAc,SAACC,GAIxB,OAFAC,QAAQC,IAAIF,GAGR,qBAAKG,UAAU,+DAAf,SACK,qBAAKC,IAAKJ,EAAML,IAAKU,IAAKL,EAAMF,WCHhCQ,EAAU,SAAC,GAAgB,IAAftB,EAAc,EAAdA,SAErB,ECHwB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAC3B,EAA0Bf,mBAAS,CAC/BqB,KAAK,GACLiB,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAdAC,qBAAW,WACP5B,EAAQ,CAACE,aAAW2B,MAAM,SAACpB,GACvBqB,YAAY,WACRH,EAAS,CACLnB,KAAMC,EACNgB,SAAS,MAGf,UAIJ,CAACvB,IAEAwB,EDhB0BK,CAAa,CAAC7B,aAAlCY,EAAb,EAAQN,KAAaiB,EAArB,EAAqBA,QAErB,OACY,qCACA,+BAAMvB,EAAN,OACA,uBACEuB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAGQP,EAAOJ,KAAK,SAAAsB,GAAM,OAEV,cAAC,EAAD,eAESA,GADCA,EAAOpB,aEhBpCqB,EAAe,WAExB,MAAoC9C,mBAAS,CAAC,cAA9C,mBAAO+C,EAAP,KAAmBC,EAAnB,KAQA,OACI,gCACI,+CACA,cAAC,EAAD,CAAajD,cAAkBiD,IACnC,uBAEA,mCAIID,EAAWxB,KAAK,SAAA0B,GAAG,OACX,cAAC,EAAD,CAEIlC,SAAYkC,GADNA,SAXtB,QCVRC,IAASC,OAAQ,cAAE,EAAF,IAEbC,SAASC,eAAe,W","file":"static/js/main.ff2e8c15.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    //Defino el useState para la caja de texto\r\n\r\n    \r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleFormSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    };\r\n            \r\n            \r\n \r\n\r\n    return ( \r\n        <form onSubmit= { handleFormSubmit }>\r\n            <input \r\n            type='text'\r\n            value={ inputValue }\r\n            onChange={ handleInputChange } />\r\n        \r\n        </form>\r\n        \r\n    )\r\n\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","export const getGifs = async( { category }) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=B4VMClSog6hZwFQ5i6KsnU7CgUxUWeDJ`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        \r\n       return {\r\n            id: img.id,\r\n            gif: img.images?.downsized_large.url,\r\n            title: img.title   \r\n        }\r\n\r\n    })\r\n return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = (props) => {\r\n\r\n    console.log(props);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__bounce animate__jackInTheBox'>\r\n          {  <img src={props.gif} alt={props.title} /> }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n/*import { getGifs } from '../helpers/getGifs';*/\r\n\r\nexport const GifGrid = ({category}) => {\r\n   \r\n    const { data:images, loading } = useFetchGifs({category});\r\n    \r\n    return (\r\n                <>\r\n                <h3>{ category } </h3>\r\n                <hr />\r\n                { loading && <p>Loading...</p>}\r\n                <div className='card-grid'>\r\n                \r\n                    {\r\n                        images.map( imagen => (\r\n                           \r\n                                <GifGridItem \r\n                                    key= {imagen.id }\r\n                                    { ...imagen } />\r\n                            \r\n                        ))\r\n                    }\r\n                        \r\n                   \r\n                </div> \r\n                </>  \r\n                    \r\n            )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ({ category }) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true});\r\n\r\n    useEffect( () => {\r\n        getGifs({category}).then( (gifs) =>{\r\n            setTimeout( () =>{\r\n                setstate({\r\n                    data: gifs,\r\n                    loading: false\r\n                    });\r\n\r\n            },3000);\r\n            \r\n        });\r\n        \r\n        },[category]);\r\n    \r\n    return state;\r\n    \r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setcategories] = useState(['One Punch']);\r\n\r\n\r\n   /* const handleAdd = () => {\r\n        const nuevaCategoria = 'Doraemon';\r\n        setcategories([...categories, nuevaCategoria]);\r\n    }*/\r\n\r\n    return ( \r\n        <div>\r\n            <h2> GifExpertApp</h2>\r\n            <AddCategory setCategories = { setcategories }/>\r\n        <hr / >\r\n\r\n        <ol > {\r\n            /*categories.map( cat => {\r\n                return <li key= { cat }> { cat } < /li>;\r\n            })*/\r\n            categories.map( cat => (\r\n                    <GifGrid \r\n                        key= {cat}\r\n                        category= { cat }\r\n                        /> )  \r\n            )} \r\n            </ol> </div>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { GifExpertApp } from './GifExpertApp';\r\n\r\nReactDOM.render( < GifExpertApp / > ,\r\n\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}